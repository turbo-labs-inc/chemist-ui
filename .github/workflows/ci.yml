name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup workspace
        uses: ./.github/actions/setup

      - name: Run lint
        run: pnpm lint

      - name: Typecheck
        run: pnpm typecheck

  build:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup workspace
        uses: ./.github/actions/setup

      - name: Build packages
        run: pnpm build

      - name: Ensure working tree clean
        uses: ./.github/actions/check-unstaged-files

  tests:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup workspace
        uses: ./.github/actions/setup

      - name: Run tests
        run: pnpm test

  # maestro-ios:
  #   runs-on: macos-latest
  #   needs: build-ios-dev
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Maestro
  #       uses: ./.github/actions/maestro

  #     - name: Download development build
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ios-dev-build
  #         path: ./

  #     - name: Extract and install app
  #       run: |
  #         # Extract the app bundle
  #         tar -xzf ios-dev-build.tar.gz
  #         APP_PATH=$(find . -name "*.app" -type d | head -n 1)

  #         if [ -z "$APP_PATH" ]; then
  #           echo "No .app bundle found after extraction"
  #           exit 1
  #         fi

  #         echo "Installing app from: $APP_PATH"
  #         xcrun simctl install $DEVICE_ID "$APP_PATH"

  #         # Get the app bundle ID for launching
  #         APP_BUNDLE_ID=$(plutil -extract CFBundleIdentifier raw "$APP_PATH/Info.plist")
  #         echo "APP_BUNDLE_ID=$APP_BUNDLE_ID" >> $GITHUB_ENV

  #     - name: Run Maestro tests
  #       run: |
  #         # Ensure the simulator is booted before running tests
  #         if [ -z "$DEVICE_ID" ]; then
  #           echo "No simulator found. Exiting."
  #           exit 1
  #         fi

  #         # Launch the app first
  #         xcrun simctl launch $DEVICE_ID $APP_BUNDLE_ID

  #         maestro test --device-id "$DEVICE_ID" --test-dir src/__tests__/e2e --report-dir src/__tests__/e2e/reports
