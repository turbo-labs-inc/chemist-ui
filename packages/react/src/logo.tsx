import { useId } from 'react';
import type { CSSProperties, HTMLAttributes, SVGProps } from 'react';

export type LogoAppearance = 'auto' | 'light' | 'dark';
export type LogoAccent = 'auto' | 'brand' | 'monochrome';

export interface ChemistLogoSvgProps
  extends Omit<SVGProps<SVGSVGElement>, 'color' | 'aria-hidden' | 'aria-labelledby'> {
  /**
   * Controls the base color palette for the mark. `auto` inherits `currentColor`,
   * while the other options provide tuned defaults for light and dark surfaces.
   */
  appearance?: LogoAppearance;
  /**
   * Determines whether the accent elements render with gradients (`brand`),
   * solid fills (`monochrome`), or adapt based on `appearance` (`auto`).
   */
  accent?: LogoAccent;
  /**
   * Overrides the computed base color. When unset, the component falls back to
   * palette presets driven by `appearance`.
   */
  baseColor?: string;
  /**
   * Overrides the computed accent color used when the mark renders in
   * `monochrome` mode.
   */
  accentColor?: string;
  /**
   * Optional gradient color stops used when `accent="brand"`.
   */
  gradientStops?: readonly [string, string];
  /**
   * Accessible title for the SVG. When provided the mark is exposed to screen
   * readers, otherwise it remains decorative.
   */
  title?: string;
}

export interface ChemistLogoProps extends HTMLAttributes<HTMLSpanElement> {
  /**
   * Shared appearance preset forwarded to both the iso and wordmark unless
   * overridden via `isoProps`/`wordmarkProps`.
   */
  appearance?: LogoAppearance;
  /**
   * Shared accent mode forwarded to both sub-marks.
   */
  accent?: LogoAccent;
  /**
   * Shared base color override forwarded to both sub-marks.
   */
  baseColor?: string;
  /**
   * Shared accent color override forwarded to both sub-marks in monochrome mode.
   */
  accentColor?: string;
  /**
   * Spacing between the iso and wordmark when rendered together.
   */
  gap?: string | number;
  /**
   * Additional props scoped to the iso glyph.
   */
  isoProps?: Partial<ChemistLogoSvgProps>;
  /**
   * Additional props scoped to the wordmark.
   */
  wordmarkProps?: Partial<ChemistLogoSvgProps>;
}

const BASE_COLOR_DEFAULTS: Record<LogoAppearance, string> = {
  auto: 'currentColor',
  light: '#FFFFFF',
  dark: '#1F2937',
};

const ISO_GRADIENT_DEFAULT: readonly [string, string] = ['#F3904F', '#3B4371'];
const WORDMARK_GRADIENT_DEFAULT: readonly [string, string] = ['#FF512F', '#F09819'];
const LIGHT_ACCENT_DEFAULT = '#EDDC5B';

const WORDMARK_BASE_PATHS = [
  'M191.907 5.19629H193.416V14.2459H199.345V16.5083H193.416V35.2577C193.416 35.6564 193.485 36.0291 193.624 36.3759C193.78 36.7226 193.979 37.026 194.222 37.286C194.482 37.5461 194.785 37.7541 195.132 37.9101C195.479 38.0488 195.86 38.1182 196.276 38.1182C196.866 38.1182 197.403 37.9708 197.888 37.6761C198.374 37.3814 198.799 37.0173 199.163 36.5839L200.489 37.468C199.761 38.6989 198.816 39.6698 197.654 40.3806C196.493 41.0914 195.054 41.4468 193.338 41.4468C192.453 41.4468 191.682 41.2907 191.023 40.9787C190.364 40.684 189.818 40.2679 189.385 39.7305C188.969 39.1757 188.657 38.5256 188.449 37.7801C188.241 37.0173 188.137 36.1765 188.137 35.2577V16.5083H183.508V15.5201L188.137 14.2459V6.67855L191.907 5.19629Z',
  'M168.658 39.6006C169.369 39.6006 170.027 39.4965 170.634 39.2885C171.241 39.0631 171.761 38.7684 172.195 38.4044C172.645 38.0403 172.992 37.6242 173.235 37.1561C173.477 36.6707 173.599 36.1766 173.599 35.6739C173.599 34.8591 173.391 34.1483 172.975 33.5415C172.576 32.9347 172.038 32.3973 171.362 31.9292C170.704 31.4438 169.949 31.0017 169.1 30.603C168.25 30.2042 167.384 29.7968 166.499 29.3807C165.615 28.9473 164.749 28.4966 163.899 28.0285C163.05 27.5431 162.287 26.9796 161.611 26.3382C160.952 25.6967 160.414 24.96 159.998 24.1278C159.6 23.2783 159.4 22.2901 159.4 21.1633C159.4 20.1058 159.626 19.1262 160.076 18.2248C160.527 17.3059 161.151 16.5171 161.949 15.8583C162.763 15.1995 163.726 14.6881 164.835 14.3241C165.945 13.9427 167.158 13.752 168.476 13.752C169.36 13.752 170.183 13.8126 170.946 13.934C171.709 14.0553 172.455 14.2894 173.183 14.6361C173.928 14.9828 174.665 15.4856 175.393 16.1444C176.121 16.7858 176.893 17.6266 177.707 18.6668L175.757 20.4091C174.752 18.7622 173.625 17.54 172.377 16.7425C171.146 15.9277 169.828 15.5203 168.424 15.5203C167.661 15.5203 166.968 15.6156 166.343 15.8063C165.719 15.9797 165.182 16.2311 164.731 16.5605C164.298 16.8725 163.951 17.2452 163.691 17.6787C163.448 18.1121 163.327 18.5715 163.327 19.0569C163.327 19.8544 163.544 20.5478 163.977 21.1373C164.428 21.7267 165.017 22.2641 165.745 22.7496C166.473 23.2176 167.297 23.6511 168.216 24.0498C169.152 24.4485 170.097 24.8559 171.05 25.272C172.021 25.6881 172.966 26.1388 173.885 26.6243C174.821 27.1097 175.653 27.6731 176.381 28.3146C177.109 28.9387 177.69 29.6668 178.124 30.4989C178.574 31.3311 178.8 32.3019 178.8 33.4115C178.8 34.5383 178.592 35.5959 178.176 36.584C177.759 37.5549 177.127 38.4044 176.277 39.1325C175.445 39.8433 174.396 40.4067 173.131 40.8228C171.865 41.2389 170.374 41.4469 168.658 41.4469C167.878 41.4469 167.072 41.3862 166.239 41.2649C165.425 41.1435 164.601 40.9095 163.769 40.5627C162.937 40.1987 162.105 39.6959 161.273 39.0545C160.44 38.413 159.626 37.5722 158.828 36.532L160.987 34.5817C161.628 35.4832 162.243 36.2546 162.833 36.8961C163.422 37.5202 164.02 38.0403 164.627 38.4564C165.251 38.8551 165.884 39.1498 166.525 39.3405C167.184 39.5139 167.895 39.6006 168.658 39.6006Z',
  'M145.643 15.2607L149.361 13.7524H150.896V40.8752H145.643V15.2607ZM145.227 4.05267C145.227 3.6366 145.305 3.24653 145.461 2.88246C145.617 2.5184 145.833 2.19767 146.111 1.92029C146.388 1.64291 146.709 1.4262 147.073 1.27017C147.437 1.11415 147.827 1.03613 148.243 1.03613C148.659 1.03613 149.049 1.11415 149.413 1.27017C149.777 1.4262 150.098 1.64291 150.375 1.92029C150.653 2.19767 150.87 2.5184 151.026 2.88246C151.182 3.24653 151.26 3.6366 151.26 4.05267C151.26 4.46875 151.182 4.85882 151.026 5.22288C150.87 5.58695 150.653 5.90767 150.375 6.18505C150.098 6.46243 149.777 6.67914 149.413 6.83517C149.049 6.9912 148.659 7.06921 148.243 7.06921C147.827 7.06921 147.437 6.9912 147.073 6.83517C146.709 6.67914 146.388 6.46243 146.111 6.18505C145.833 5.90767 145.617 5.58695 145.461 5.22288C145.305 4.85882 145.227 4.46875 145.227 4.05267Z',
  'M99.0975 13.752H100.606V19.2649C101.282 18.5368 102.045 17.8433 102.894 17.1846C103.744 16.5084 104.619 15.919 105.521 15.4162C106.422 14.8962 107.324 14.4888 108.225 14.194C109.127 13.8993 109.985 13.752 110.8 13.752C111.58 13.752 112.368 13.8906 113.166 14.168C113.981 14.4454 114.726 14.8355 115.402 15.3382C116.096 15.841 116.685 16.4391 117.171 17.1326C117.673 17.8087 118.003 18.5541 118.159 19.369C118.592 18.5888 119.19 17.8607 119.953 17.1846C120.733 16.4911 121.591 15.893 122.528 15.3902C123.464 14.8875 124.452 14.4888 125.492 14.194C126.55 13.8993 127.581 13.752 128.587 13.752C129.592 13.752 130.528 13.9773 131.395 14.4281C132.279 14.8615 133.051 15.4596 133.71 16.2224C134.368 16.9679 134.889 17.852 135.27 18.8749C135.651 19.8804 135.842 20.9552 135.842 22.0994V40.8748H130.563V22.8276C130.563 22.0821 130.433 21.38 130.173 20.7212C129.93 20.0451 129.592 19.4556 129.159 18.9529C128.725 18.4501 128.214 18.0514 127.625 17.7567C127.052 17.4619 126.446 17.3146 125.804 17.3146C125.076 17.3146 124.331 17.4186 123.568 17.6266C122.822 17.8173 122.112 18.0861 121.435 18.4328C120.759 18.7795 120.144 19.1869 119.589 19.655C119.034 20.1058 118.592 20.5912 118.263 21.1113V40.8748H112.984V22.8276C112.984 22.0821 112.854 21.38 112.594 20.7212C112.334 20.0451 111.987 19.4556 111.554 18.9529C111.12 18.4501 110.609 18.0514 110.019 17.7567C109.43 17.4619 108.815 17.3146 108.173 17.3146C107.497 17.3146 106.795 17.4186 106.067 17.6266C105.356 17.8347 104.654 18.1121 103.96 18.4588C103.284 18.8055 102.651 19.2129 102.062 19.681C101.473 20.1318 100.987 20.6085 100.606 21.1113V40.8748H95.3008V15.2342L99.0975 13.752Z',
  'M75.1989 41.4469C73.3959 41.4469 71.6969 41.1088 70.102 40.4327C68.5243 39.7566 67.1461 38.8378 65.9672 37.6762C64.7883 36.5147 63.8522 35.1538 63.1587 33.5935C62.4826 32.0159 62.1445 30.3429 62.1445 28.5746C62.1445 26.4422 62.4566 24.4745 63.0807 22.6715C63.7048 20.8512 64.589 19.2823 65.7332 17.9647C66.8774 16.6471 68.247 15.6156 69.8419 14.8702C71.4542 14.1247 73.2485 13.752 75.2249 13.752C76.9585 13.752 78.5535 14.064 80.0097 14.6881C81.466 15.2949 82.7142 16.1184 83.7544 17.1586C84.8119 18.1814 85.6267 19.369 86.1988 20.7212C86.7883 22.0734 87.083 23.4864 87.083 24.96H67.2414C67.2414 26.7456 67.4668 28.4012 67.9176 29.9268C68.3856 31.4524 69.0358 32.77 69.8679 33.8795C70.7001 34.9891 71.6882 35.8559 72.8324 36.48C73.9766 37.1041 75.2335 37.4162 76.6031 37.4162C77.7473 37.4162 78.8482 37.2341 79.9057 36.8701C80.9632 36.4887 81.9167 35.9946 82.7662 35.3878C83.633 34.781 84.3698 34.0876 84.9766 33.3074C85.5834 32.5273 86.0081 31.7212 86.2508 30.889L87.7851 31.5651C87.4037 32.9347 86.7883 34.2176 85.9388 35.4138C85.0893 36.61 84.0924 37.6589 82.9482 38.5604C81.8214 39.4445 80.5905 40.1467 79.2556 40.6668C77.9207 41.1868 76.5684 41.4469 75.1989 41.4469ZM80.4518 22.8276C80.4518 21.8221 80.2698 20.8859 79.9057 20.0191C79.559 19.1522 79.0736 18.4068 78.4494 17.7827C77.8253 17.1412 77.0972 16.6385 76.2651 16.2744C75.4329 15.9103 74.5401 15.7283 73.5866 15.7283C72.7891 15.7283 72.0263 15.9103 71.2982 16.2744C70.57 16.6211 69.9199 17.1152 69.3478 17.7567C68.7757 18.3808 68.299 19.1262 67.9176 19.9931C67.5535 20.8599 67.3368 21.7961 67.2674 22.8016L80.4518 22.8276Z',
  'M37.5706 19.1352C39.1482 17.3322 40.8125 15.9886 42.5635 15.1044C44.3144 14.203 46.0828 13.7522 47.8684 13.7522C48.8046 13.7522 49.6714 13.9602 50.4689 14.3763C51.2837 14.7924 51.9945 15.3645 52.6013 16.0926C53.208 16.8208 53.6848 17.6789 54.0315 18.6671C54.3782 19.6379 54.5516 20.6781 54.5516 21.7876V40.875H49.2727V22.6978C49.2727 20.9295 48.8739 19.5946 48.0764 18.6931C47.279 17.7743 46.2561 17.3148 45.0079 17.3148C44.4531 17.3148 43.8637 17.4102 43.2396 17.6009C42.6155 17.7916 41.9827 18.0603 41.3412 18.407C40.6998 18.7364 40.0584 19.1352 39.4169 19.6033C38.7755 20.0713 38.16 20.5914 37.5706 21.1635V40.875H32.2656V2.18014L36.0623 0.671875H37.5706V19.1352Z',
  'M19.2616 21.7354C19.0709 21.0419 18.8109 20.3398 18.4815 19.629C18.1521 18.9182 17.7274 18.2768 17.2073 17.7047C16.7045 17.1152 16.1064 16.6385 15.4129 16.2744C14.7195 15.9103 13.9047 15.7283 12.9685 15.7283C11.7723 15.7283 10.6974 15.971 9.74393 16.4564C8.79042 16.9419 7.98428 17.6006 7.3255 18.4328C6.66671 19.2649 6.16396 20.2358 5.81723 21.3453C5.4705 22.4548 5.29713 23.6337 5.29713 24.8819C5.29713 26.5809 5.51384 28.1932 5.94725 29.7188C6.398 31.2271 7.02211 32.5533 7.81958 33.6975C8.6344 34.8417 9.60524 35.7519 10.7321 36.428C11.8763 37.0868 13.1505 37.4162 14.5548 37.4162C15.7857 37.4162 16.8519 37.2255 17.7534 36.8441C18.6722 36.4453 19.461 35.9166 20.1198 35.2578C20.7959 34.599 21.3767 33.8362 21.8621 32.9694C22.3475 32.0852 22.7809 31.1577 23.1623 30.1869L24.7486 30.837C24.2979 32.5013 23.6911 33.9922 22.9283 35.3098C22.1655 36.6274 21.264 37.7456 20.2238 38.6644C19.2009 39.5659 18.0394 40.2593 16.7392 40.7448C15.4563 41.2129 14.0607 41.4469 12.5524 41.4469C10.8015 41.4469 9.16316 41.1088 7.63755 40.4327C6.11195 39.7393 4.78571 38.7944 3.65884 37.5982C2.53197 36.402 1.63915 35.0064 0.980364 33.4115C0.32158 31.8165 -0.0078125 30.1089 -0.0078125 28.2885C-0.0078125 26.9536 0.156884 25.6707 0.486276 24.4399C0.815668 23.1916 1.27508 22.0301 1.86452 20.9552C2.4713 19.8804 3.19076 18.9009 4.02291 18.0167C4.87239 17.1326 5.80856 16.3784 6.83141 15.7543C7.85426 15.1129 8.94645 14.6188 10.108 14.272C11.2869 13.9253 12.5091 13.752 13.7746 13.752C14.8322 13.752 15.8464 13.8733 16.8172 14.116C17.788 14.3587 18.6809 14.7055 19.4957 15.1562C20.3105 15.5896 21.0299 16.1357 21.6541 16.7945C22.2782 17.4359 22.7636 18.1554 23.1103 18.9529L19.2616 21.7354Z',
];

const WORDMARK_ACCENT_PATHS = [
  'M230 20.6103C230 21.1199 229.745 21.3747 229.235 21.3747H223.12C222.61 21.3747 222.355 21.1199 222.355 20.6103C222.355 20.1006 222.61 19.8458 223.12 19.8458H225.413V7.61481H223.12C222.61 7.61481 222.355 7.36 222.355 6.85038C222.355 6.34075 222.61 6.08594 223.12 6.08594H229.235C229.745 6.08594 230 6.34075 230 6.85038C230 7.36 229.745 7.61481 229.235 7.61481H226.942V19.8458H229.235C229.745 19.8458 230 20.1006 230 20.6103Z',
  'M218.788 16.5333C218.788 17.8719 218.316 19.0134 217.372 19.9579C216.427 20.9024 215.286 21.3747 213.947 21.3747C212.608 21.3747 211.467 20.9024 210.522 19.9579C209.578 19.0134 209.105 17.8719 209.105 16.5333V6.85038C209.105 6.34075 209.36 6.08594 209.87 6.08594C210.38 6.08594 210.634 6.34075 210.634 6.85038V16.5333C210.634 17.4438 210.957 18.2252 211.603 18.8775C212.255 19.5231 213.036 19.8458 213.947 19.8458C214.857 19.8458 215.635 19.5231 216.281 18.8775C216.933 18.2252 217.259 17.4438 217.259 16.5333V6.85038C217.259 6.34075 217.514 6.08594 218.024 6.08594C218.534 6.08594 218.788 6.34075 218.788 6.85038V16.5333Z',
];

const ISO_PATH =
  'M28.6777 25.7458C28.7429 25.6606 28.8085 25.5754 28.8732 25.4903C35.1592 24.7588 39.3825 23.5757 39.217 22.3971C39.092 21.5077 36.4942 20.802 32.4678 20.3991C38.3238 11.4174 40.8253 3.58554 38.134 1.16906C35.6362 -1.07357 29.3377 1.95308 22.277 8.24499C21.8749 5.09136 21.275 3.12358 20.5471 3.01328C19.4745 2.85093 18.3982 6.7572 17.6885 12.693C17.2807 13.1203 16.8725 13.5566 16.4645 14.0014C8.37947 7.05537 1.77447 3.05395 0.585339 4.66188C-0.584526 6.24384 3.83861 12.7796 11.0197 20.4984C10.9546 20.5836 10.889 20.6688 10.8244 20.7539C4.53829 21.4852 0.315067 22.6684 0.480594 23.8471C0.605564 24.7364 3.20332 25.4422 7.22973 25.845C1.37369 34.8267 -1.12773 42.6586 1.5636 45.0751C4.0614 47.3177 10.3598 44.2911 17.4205 37.9991C17.8227 41.1527 18.4225 43.1206 19.1504 43.2309C20.2231 43.3933 21.2994 39.4869 22.0091 33.5511C22.4169 33.1239 22.825 32.6875 23.2331 32.2427C31.3181 39.1889 37.9231 43.1903 39.1122 41.5823C40.2821 40.0004 35.859 33.4646 28.6779 25.7459L28.6777 25.7458ZM28.1955 25.23C26.7105 23.6499 25.114 22.0244 23.4299 20.3851C26.4816 20.4323 29.2328 20.615 31.4523 20.899C30.4654 22.3211 29.3763 23.7726 28.1956 25.23H28.1955ZM27.5441 25.4359C26.0257 25.5813 24.3817 25.6936 22.6518 25.7656C22.6884 25.0421 22.7203 24.3073 22.7462 23.5609C22.7833 22.4931 22.8075 21.4436 22.8199 20.4174C24.5117 22.1243 26.0964 23.8113 27.5442 25.436L27.5441 25.4359ZM37.0645 22.8591C36.9937 23.8258 33.7958 24.7217 29.0336 25.2779C30.126 23.8318 31.1448 22.3951 32.0824 20.9842C35.2069 21.4325 37.1205 22.0941 37.0645 22.859V22.8591ZM36.854 4.38968C38.9326 6.7173 36.7489 13.1003 31.8364 20.3391C29.3338 20.1162 26.3341 20.0056 23.0653 20.0314C22.9855 19.9543 22.9054 19.8773 22.8253 19.8C22.8537 16.0145 22.7178 12.5783 22.4517 9.81446C29.0115 4.42891 34.7763 2.06294 36.854 4.38956V4.38968ZM20.0884 5.63842C20.664 5.593 21.1787 6.79754 21.5823 8.87163C20.3836 9.96852 19.166 11.1573 17.9442 12.4266C18.4825 8.35032 19.2584 5.70385 20.0886 5.63831L20.0884 5.63842ZM17.7479 14.0754C19.1206 12.7157 20.4885 11.4634 21.8275 10.3336C22.1748 12.7267 22.404 15.8837 22.4662 19.455C20.8324 17.8908 19.2181 16.4104 17.6508 15.0326C17.6817 14.7067 17.7142 14.3888 17.7479 14.0754ZM22.4785 20.3752C22.4867 21.2658 22.4848 22.1788 22.4718 23.1097C22.4592 24.0154 22.4366 24.9056 22.4049 25.7762C21.5664 25.809 20.7088 25.8325 19.8366 25.8457C18.9399 25.8592 18.0605 25.8612 17.2027 25.8526C17.1984 25.091 17.2007 24.3151 17.2118 23.5248C17.2263 22.4836 17.2546 21.464 17.2942 20.4701C18.2515 20.4291 19.2335 20.3997 20.2364 20.3845C20.9975 20.3732 21.7448 20.3707 22.4784 20.3752H22.4785ZM22.4418 20.0375C21.4572 20.0503 20.4503 20.0755 19.426 20.1139C18.7079 20.1406 18.0009 20.1738 17.3047 20.2117C17.3756 18.5261 17.4807 16.923 17.6142 15.4371C19.1834 16.8562 20.8055 18.3992 22.4418 20.0375ZM17.509 14.3126C17.4904 14.4942 17.4716 14.6752 17.4537 14.86C17.3665 14.7836 17.2792 14.707 17.1923 14.6313C17.2979 14.5246 17.4035 14.418 17.509 14.3126ZM16.9687 14.858C17.1175 14.9905 17.2667 15.1243 17.4166 15.2591C17.2711 16.8219 17.1502 18.4866 17.0589 20.2258C15.2597 20.3275 13.541 20.4642 11.9403 20.6304C11.9196 20.6073 11.8989 20.5842 11.8782 20.5613C12.8122 19.4094 13.8026 18.2543 14.8448 17.1072C15.5506 16.3305 16.2596 15.5804 16.9686 14.858H16.9687ZM17.0454 20.4809C17.0088 21.2037 16.977 21.9379 16.9511 22.6834C16.9138 23.7572 16.8897 24.8124 16.8773 25.8442C16.8107 25.7776 16.7442 25.7113 16.6775 25.6443C15.0535 24.0115 13.5269 22.3957 12.1226 20.8337C13.6429 20.6798 15.2992 20.5601 17.0454 20.481V20.4809ZM3.11614 6.30827C4.37053 5.17281 9.73594 8.51598 16.2566 14.2287C15.3297 15.2462 14.404 16.3076 13.4861 17.4096C12.7632 18.2775 12.0656 19.1468 11.3928 20.0141C5.33963 13.1517 1.81258 7.48839 3.11614 6.30827ZM11.5083 21.021C12.9853 22.5922 14.5722 24.2082 16.2461 25.8381C13.2245 25.7791 10.5124 25.5867 8.34104 25.2946C9.29908 23.8933 10.3584 22.4612 11.5083 21.021ZM3.00895 23.371C3.07772 22.4316 6.09797 21.5586 10.6388 20.9996C9.57233 22.4128 8.5764 23.8167 7.65775 25.1963C4.73171 24.7494 2.95498 24.1083 3.00906 23.371H3.00895ZM3.19832 41.4283C1.16112 39.147 3.21823 32.9703 7.92568 25.9104C10.4154 26.1295 13.3909 26.2384 16.6321 26.2127C16.7117 26.2899 16.792 26.3669 16.872 26.444C16.8441 30.1711 16.9751 33.5612 17.2331 36.3028C10.8263 41.476 5.23712 43.7115 3.19821 41.4283H3.19832ZM19.5955 40.9962C18.9906 41.0439 18.4531 39.7118 18.0409 37.44C19.2776 36.3116 20.5347 35.0857 21.7962 33.7733C21.2565 38.0965 20.4549 40.9283 19.5955 40.9962ZM21.9884 32.054C20.574 33.4388 19.1666 34.7081 17.7927 35.8458C17.4685 33.4192 17.2602 30.2846 17.2119 26.7706C18.8594 28.3485 20.487 29.8411 22.0669 31.2295C22.0417 31.5086 22.0156 31.7835 21.9884 32.054ZM17.241 26.2069C18.2303 26.194 19.2421 26.1689 20.2714 26.1304C20.9903 26.1034 21.698 26.0704 22.3949 26.0323C22.33 27.7116 22.2319 29.3151 22.1048 30.8049C20.5275 29.3913 18.8929 27.8489 17.2409 26.2069H17.241ZM22.1968 31.8498C22.2125 31.6949 22.2285 31.5415 22.2437 31.3843C22.3185 31.4499 22.3935 31.5154 22.468 31.5806C22.3776 31.6707 22.2871 31.7606 22.1968 31.8499V31.8498ZM22.7074 31.3409C22.5663 31.2162 22.4248 31.0905 22.2828 30.9638C22.4274 29.4071 22.5476 27.7498 22.6384 26.0185C24.419 25.9178 26.1202 25.7828 27.7068 25.6189C27.7365 25.6523 27.7666 25.686 27.7961 25.7194C26.9739 26.7177 26.1102 27.7174 25.2074 28.711C24.3768 29.6252 23.5416 30.5024 22.7074 31.341V31.3409ZM36.2074 39.5776C34.9781 40.6904 29.8008 37.5018 23.4572 31.9976C24.3787 30.9854 25.2989 29.9302 26.2113 28.8346C26.9243 27.9787 27.6127 27.1214 28.2769 26.2661C34.1178 32.95 37.486 38.4201 36.2075 39.5776H36.2074Z';

function resolveAccentMode(accent: LogoAccent | undefined, appearance: LogoAppearance): 'brand' | 'monochrome' {
  if (accent && accent !== 'auto') {
    return accent;
  }

  if (appearance === 'dark') {
    return 'brand';
  }

  return 'monochrome';
}

function normalizeGap(gap: string | number | undefined): string | undefined {
  if (gap == null) {
    return undefined;
  }

  return typeof gap === 'number' ? `${gap}px` : gap;
}

export const ChemistLogoIso = ({
  appearance = 'auto',
  accent = 'auto',
  baseColor,
  accentColor,
  gradientStops = ISO_GRADIENT_DEFAULT,
  title,
  style,
  role,
  ...props
}: ChemistLogoSvgProps): JSX.Element => {
  const id = useId();
  const gradientId = `${id}-iso-gradient`;
  const titleId = title ? `${id}-title` : undefined;

  const resolvedBaseColor = baseColor ?? BASE_COLOR_DEFAULTS[appearance];
  const accentMode = resolveAccentMode(accent, appearance);
  const resolvedSolidColor = accentColor ?? resolvedBaseColor;

  const { 'aria-hidden': ariaHiddenProp, 'aria-labelledby': ariaLabelledByProp, ...rest } = props as ChemistLogoSvgProps;

  const finalRole = role ?? (title ? 'img' : undefined);
  const finalAriaHidden = title ? undefined : ariaHiddenProp ?? true;
  const finalAriaLabelledBy = title ? ariaLabelledByProp ?? titleId : ariaLabelledByProp;
  const finalStyle: CSSProperties | undefined = style;

  const [startColor, endColor] = gradientStops;
  const startStopProps =
    typeof startColor === 'string' && startColor.includes('var(')
      ? ({ style: { stopColor: startColor } } as const)
      : ({ stopColor: startColor } as const);
  const endStopProps =
    typeof endColor === 'string' && endColor.includes('var(')
      ? ({ style: { stopColor: endColor } } as const)
      : ({ stopColor: endColor } as const);

  return (
    <svg
      viewBox="0 0 40 46"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      role={finalRole}
      aria-hidden={finalAriaHidden}
      aria-labelledby={finalAriaLabelledBy}
      style={finalStyle}
      {...rest}
    >
      {title ? <title id={titleId}>{title}</title> : null}
      {accentMode === 'brand' ? (
        <defs>
          <linearGradient
            id={gradientId}
            x1="0.398438"
            y1="23.1221"
            x2="39.2991"
            y2="23.1221"
            gradientUnits="userSpaceOnUse"
          >
            <stop offset="0" {...startStopProps} />
            <stop offset="1" {...endStopProps} />
          </linearGradient>
        </defs>
      ) : null}
      <path d={ISO_PATH} fill={accentMode === 'brand' ? `url(#${gradientId})` : resolvedSolidColor} />
    </svg>
  );
};

export const ChemistLogoWordmark = ({
  appearance = 'auto',
  accent = 'auto',
  baseColor,
  accentColor,
  gradientStops = WORDMARK_GRADIENT_DEFAULT,
  title,
  style,
  role,
  ...props
}: ChemistLogoSvgProps): JSX.Element => {
  const id = useId();
  const gradientId = `${id}-wordmark-gradient`;
  const titleId = title ? `${id}-title` : undefined;

  const resolvedBaseColor = baseColor ?? BASE_COLOR_DEFAULTS[appearance];
  const accentMode = resolveAccentMode(accent, appearance);
  const resolvedAccentColor = accentColor ?? (appearance === 'light' ? LIGHT_ACCENT_DEFAULT : resolvedBaseColor);

  const { 'aria-hidden': ariaHiddenProp, 'aria-labelledby': ariaLabelledByProp, ...rest } = props as ChemistLogoSvgProps;

  const finalRole = role ?? (title ? 'img' : undefined);
  const finalAriaHidden = title ? undefined : ariaHiddenProp ?? true;
  const finalAriaLabelledBy = title ? ariaLabelledByProp ?? titleId : ariaLabelledByProp;
  const finalStyle: CSSProperties | undefined = style;

  const [startColor, endColor] = gradientStops;
  const startStopProps =
    typeof startColor === 'string' && startColor.includes('var(')
      ? ({ style: { stopColor: startColor } } as const)
      : ({ stopColor: startColor } as const);
  const endStopProps =
    typeof endColor === 'string' && endColor.includes('var(')
      ? ({ style: { stopColor: endColor } } as const)
      : ({ stopColor: endColor } as const);

  return (
    <svg
      viewBox="0 0 230 42"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      role={finalRole}
      aria-hidden={finalAriaHidden}
      aria-labelledby={finalAriaLabelledBy}
      style={finalStyle}
      {...rest}
    >
      {title ? <title id={titleId}>{title}</title> : null}
      {accentMode === 'brand' ? (
        <defs>
          <linearGradient
            id={gradientId}
            x1="207.831"
            y1="13.8747"
            x2="232.831"
            y2="13.8747"
            gradientUnits="userSpaceOnUse"
          >
            <stop offset="0" {...startStopProps} />
            <stop offset="1" {...endStopProps} />
          </linearGradient>
        </defs>
      ) : null}
      {WORDMARK_BASE_PATHS.map((d, index) => (
        <path key={`base-${index}`} d={d} fill={resolvedBaseColor} />
      ))}
      {WORDMARK_ACCENT_PATHS.map((d, index) => (
        <path
          key={`accent-${index}`}
          d={d}
          fill={accentMode === 'brand' ? `url(#${gradientId})` : resolvedAccentColor}
        />
      ))}
    </svg>
  );
};

export const ChemistLogo = ({
  appearance = 'auto',
  accent = 'auto',
  baseColor,
  accentColor,
  gap = '0.875rem',
  isoProps,
  wordmarkProps,
  style,
  ...rest
}: ChemistLogoProps): JSX.Element => {
  const normalizedGap = normalizeGap(gap) ?? '0.875rem';
  const mergedStyle: CSSProperties = {
    display: 'inline-flex',
    alignItems: 'center',
    gap: normalizedGap,
    ...style,
  };

  const {
    appearance: isoAppearance,
    accent: isoAccent,
    baseColor: isoBaseColor,
    accentColor: isoAccentColor,
    gradientStops: isoGradientStops,
    title: isoTitle,
    ...isoRest
  } = isoProps ?? {};

  const {
    appearance: wordmarkAppearance,
    accent: wordmarkAccent,
    baseColor: wordmarkBaseColor,
    accentColor: wordmarkAccentColor,
    gradientStops: wordmarkGradientStops,
    title: wordmarkTitle,
    ...wordmarkRest
  } = wordmarkProps ?? {};

  return (
    <span style={mergedStyle} {...rest}>
      <ChemistLogoIso
        appearance={isoAppearance ?? appearance}
        accent={isoAccent ?? accent}
        baseColor={isoBaseColor ?? baseColor}
        accentColor={isoAccentColor ?? accentColor}
        gradientStops={isoGradientStops}
        title={isoTitle}
        {...isoRest}
      />
      <ChemistLogoWordmark
        appearance={wordmarkAppearance ?? appearance}
        accent={wordmarkAccent ?? accent}
        baseColor={wordmarkBaseColor ?? baseColor}
        accentColor={wordmarkAccentColor ?? accentColor}
        gradientStops={wordmarkGradientStops}
        title={wordmarkTitle}
        {...wordmarkRest}
      />
    </span>
  );
};

ChemistLogoIso.displayName = 'ChemistLogoIso';
ChemistLogoWordmark.displayName = 'ChemistLogoWordmark';
ChemistLogo.displayName = 'ChemistLogo';
